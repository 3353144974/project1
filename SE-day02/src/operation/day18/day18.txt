FileOutputStream()  字节输出流，写出
在后面加boolean参数true是添加或追加，默认是false是不添加
write()方法，写入，必须写字节或字节数组
字符串.getBytes(),也可以放进去
“\r\n”.getBytes()是换行
它是Windows系统的
Unix系统是"\n"
Mac系统里面是"\r"，从 Mac OS X开始与Linux统一。
三个参数就是(字节数组，起始位置，长度或个数)；包含起始位置
如果长度超出会出现数组越界，负数也不可以
IO流写完后一定要关闭，不能抛异常
要放在finally里面，因为finally一定会执行
要判断fos!=null成立则关闭
close()方法是关闭
FileInputStream()字节输入流，写入或获取
read()方法，取出字节或字节数组或读取
用字节数组的话返回的时字节长度
输出的时字节数，要变成原来的内容要强转成char类型
当读取到末尾时返回-1
close()方法是关闭和上面时一样的
流关闭，先开后关，后开先关
字符流
Reader(),等同于字节流的输入流，也就是获取
Writer()，等同于字节流的写出，
write(),可以写入int 类型，会自动转换为单个字符
也可以写入字符数组
字符串
用字符数组和字符串时都可以写入三个参数，和字节流写入一样
遇到中文字符时可能不会显示完整的字符
因为一个中文可能占用多个字节储存
1. 虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。
2. 未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。
即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。
字符流，只能操作文本文件，不能操作图片，视频等非文本文件。
 当我们单纯读或者写文本文件时 使用字符流 其他情况使用字节流
关闭之前要先调用flush()方法，会写入文件中，但会关闭流对象
调用flush()方法就是把缓存区中的东西写入文件中，不会关闭流对象
可以重复调用flush()方法，把缓存区里面的东西写到文件中去
相当于之后的时追加，前面的以及放到文件里面去了，不会覆盖
关闭close()方法只能调用一次
