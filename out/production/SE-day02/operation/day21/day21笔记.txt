反射:
使用反射机制解剖类的前提
1）Java中使用Class类表示某个class文件. 
2）任何一个class文件都是Class这个类的一个实例对象.

获取Class对象的三种方式:
方式1：通过类名.class获取
方式2：通过Object类的成员方法getClass()方法获取
方式3：通过Class.forName("全限定类名")方法获取

获取Class对象的信息
Class对象相关方法
1. String getSimpleName() ： 获得简单类名，只是类名，没有包
. String getName() ： 获取完整类名，包含包名+类名
2. T newInstance() ：创建此 Class 对象所表示的类的一个新实例。
要求：类必须有public的无参数构造方法
获取Class对象的Constructor信息

Class类中与Constructor(构造方法)相关方法
1. Constructor getConstructor(Class... parameterTypes) 
根据参数类型获取构造方法对象，只能获得public修饰的构造方法。
 如果不存在对应的构造方法，则会抛出 java.lang.NoSuchMethodException 异常。
 2. Constructor getDeclaredConstructor(Class... parameterTypes) 
根据参数类型获取构造方法对象，能获取所有的构造方法，包括private修饰的构造方法。
 如果不存在对应的构造方法，则会抛出 java.lang.NoSuchMethodException 异常。 
3. Constructor[] getConstructors() 
获取所有的public修饰的构造方法 
4. Constructor[] getDeclaredConstructors() 
获取所有构造方法，包括public、privat、默认、protected修饰的

Constructor类中常用方法:
1. T newInstance(Object... initargs) 根据指定参数创建对象。 
2. void setAccessible(true) 
暴力反射，除public修饰的构造方法外，其他构造方法反射都需要暴力反射

获取Class对象的Method(成员方法)信息:
Class类中与Method相关方法
1. Method getMethod("方法名", 方法的参数类型... 类型) 
根据方法名和参数类型获得一个方法对象，只能是获取public修饰的 
2. Method getDeclaredMethod("方法名", 方法的参数类型... 类型)
 根据方法名和参数类型获得一个方法对象，包括private修饰的 
3. Method[] getMethods() 
获取所有的public修饰的成员方法，包括父类中。 
4. Method[] getDeclaredMethods() 
获取当前类中所有的方法，包含私有的，不包括父类中。

Method类中常用方法:
1. Object invoke(Object obj, Object... args) 
根据参数args调用对象obj的该成员方法 
如果obj=null，则表示该方法是静态方法 
2. void setAccessible(boolean flag) 
暴力反射，设置为可以直接调用私有修饰的成员方法

获取Class对象的Field(成员变量)信息
Class类中与Field相关方法:
1. Field getDeclaredField(String name) 
根据属性名获得属性对象，包括private修饰的 
2. Field getField(String name) 
根据属性名获得属性对象，只能获取public修饰的 
3. Field[] getFields() 
获取所有的public修饰的属性对象，返回数组。 
4. Field[] getDeclaredFields() 
获取所有的属性对象，包括private修饰的，返回数组。

Field类中常用方法:
get()和set()方法
setXxx方法都是给对象obj的属性设置使用，针对不同的类型选取不同的方法。
getXxx方法是获取对象obj对应的属性值的，针对不同的类型选取不同的方法。
void setAccessible(true);暴力反射，设置为可以直接访问私有类型的属性。 
Class getType(); 获取属性的类型，返回Class对象。

注解
注解的作用
注解的作用就是给程序带入参数。
常见注解:
1. @author：用来标识作者名，eclipse开发工具默认的是系统用户名。
2. @version：用于标识对象的版本号，适用范围：文件、类、方法。
3. @Override ：用来修饰方法声明，告诉编译器该方法是重写父类中的方法，如果父类不存在该方
法，则编译失败。

自定义注解

定义格式:
public @interface 注解名{ 
}
如：定义一个名为Student的注解 
public @interface Student { 
}

注解的属性:

1. 属性的作用
可以让用户在使用注解时传递参数，让注解的功能更加强大。
2. 属性的格式
格式1：数据类型 属性名();
格式2：数据类型 属性名() default 默认值;
3. 属性适用的数据类型
八种基本数据类型（int,float,boolean,byte,double,char,long,short)
String类型，Class类型，枚举类型，注解类型
以上所有类型的一维数组
使用注意事项
如果属性有默认值，则使用注解的时候，这个属性可以不用赋值。
如果属性没有默认值，那么在使用注解时一定要给属性赋值。

特殊属性value:
1. 当注解中只有一个属性且名称是value，在使用注解时给value属性赋值可以直接给属性值，无论
value是单值元素还是数组类型。
2. 如果注解中除了value属性还有其他属性，且至少有一个属性没有默认值，则在使用注解给属性赋
值时，value属性名不能省略。

注解之元注解:
常用元注解:
@Target
@Retention

元注解之@Target:
作用：指明此注解用在哪个位置，如果不写默认是任何地方都可以使用。
可选的参数值在枚举类ElemenetType中包括：
TYPE： 用在类,接口上 
FIELD：用在成员变量上 
METHOD： 用在方法上 
PARAMETER：用在参数上 
CONSTRUCTOR：用在构造方法上 
LOCAL_VARIABLE：用在局部变量上 
ANNOTATION_TYPE：用在注解上

元注解之@Retention
作用：定义该注解的生命周期(有效范围)。
可选的参数值在枚举类型RetentionPolicy中包括
SOURCE：注解只存在于Java源代码中，编译生成的字节码文件中就不存在了。
CLASS：注解存在于Java源代码、编译以后的字节码文件中，运行的时候内存中没有，默认值。 
RUNTIME：注解存在于Java源代码中、编译以后的字节码文件中、运行时内存中，程序可以通过 反射获取该注解。
元注解使用示例:
1、@Target({ElementType.METHOD,ElementType.TYPE})
2、@Retention(RetentionPolicy.SOURCE)

注解解析
什么是注解解析:通过Java技术获取注解数据的过程则称为注解解析。
与注解解析相关的接口:
Anontation：所有注解类型的公共接口，类似所有类的父类是Object
。
AnnotatedElement：定义了与注解解析相关的方法，常用方法以下四个：
boolean isAnnotationPresent(Class annotationClass); 
判断当前对象是否有指定的注 解，有则返回true，否则返回false。
T getAnnotation(Class<T> annotationClass); 获得当前对象上指定的注解对象。
Annotation[] getAnnotations(); 获得当前对象及其从父类上继承的所有的注解对象。
Annotation[] getDeclaredAnnotations();获得当前对象上所有的注解对象，不包括父类的。
注解作用在那个成员上，就通过反射获得该成员的对象来得到它的注解。
如注解作用在方法上，就通过方法(Method)对象得到它的注解

Method method = clazz.getDeclaredMethod("方法名");
Compute compute = method.getAnnotation(Compute.class);
如注解作用在类上，就通过Class对象得到它的注解
Class c = 类名.class;
Compute compute = c.getAnnotation(Compute.class);

